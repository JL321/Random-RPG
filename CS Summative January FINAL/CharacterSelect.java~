/** 
 * this template can be used for a start menu
 * for your final project
**/


//Imports
import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import java.awt.Color;
import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.SwingUtilities;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Dimension;
import javax.swing.ImageIcon;
import javax.swing.BorderFactory;
import javax.swing.border.EmptyBorder;

  
class CharacterSelect extends JFrame{ 

  JFrame thisFrame;
  
  //Constructor - this runs first
  CharacterSelect() { 
    super("Character Select");
    this.thisFrame = this; 
    
    //configure the window
    this.setSize(1800,900);    
    this.setLocationRelativeTo(null); //start the frame in the center of the screen
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  
    this.setResizable (false);
    
    //Display the frame without border and invisible
    this.setUndecorated(true);
    setBackground(new Color(0,0,0,0));
    
    
         
    //Create a Panel for stuff
    JPanel decPanel = new DecoratedPanel();
    decPanel.setBorder(new EmptyBorder(0, 0, 1800, 0));

    
    JPanel mainPanel = new JPanel();
    mainPanel.setLayout(new BorderLayout());
    mainPanel.setBackground(new Color(0, 0, 0, 0));
    mainPanel.setPreferredSize(new Dimension(1800,900));
    
    
    //Create a JButton for the bottomPanel

    JButton knightButton = new JButton(new ImageIcon("KnightButton.png"));
    knightButton.setBackground(new Color(0, 0, 0, 0));
    knightButton.setRolloverIcon(new ImageIcon("KnightButtonPressed.png"));
    knightButton.setBorder(BorderFactory.createEmptyBorder());
    knightButton.setFocusPainted(false);
    knightButton.addActionListener(new KnightButtonListener());
    
    JButton rangerButton = new JButton(new ImageIcon("RangerButton.png"));
    rangerButton.setBackground(new Color(0, 0, 0, 0));
    rangerButton.setRolloverIcon(new ImageIcon("RangerButtonPressed.png"));
    rangerButton.setBorder(BorderFactory.createEmptyBorder());
    rangerButton.setFocusPainted(false);
    rangerButton.addActionListener(new RangerButtonListener());
    
    JButton mageButton = new JButton(new ImageIcon("MageButton.png"));
    mageButton.setBackground(new Color(0, 0, 0, 0));
    mageButton.setRolloverIcon(new ImageIcon("MageButtonPressed.png"));
    mageButton.setBorder(BorderFactory.createEmptyBorder());
    mageButton.setFocusPainted(false);
    mageButton.addActionListener(new MageButtonListener());
    
    JButton returnButton = new JButton(new ImageIcon("BackButton.png"));
    returnButton.setBackground(new Color(0, 0, 0, 0));
    returnButton.setRolloverIcon(new ImageIcon("BackButtonPressed.png"));
    returnButton.setBorder(BorderFactory.createEmptyBorder());
    returnButton.setFocusPainted(false);
    returnButton.addActionListener(new ReturnButtonListener());
    
    JPanel bottomPanel = new JPanel();
    bottomPanel.setBackground(new Color(0, 0, 0, 0));
    bottomPanel.add(knightButton);
    bottomPanel.add(rangerButton);
    bottomPanel.add(mageButton);
    bottomPanel.add(returnButton);
    
    
    //Add all panels to the mainPanel according to border layout
    mainPanel.add(bottomPanel, BorderLayout.SOUTH);
    
    //mainPanel.addKeyListener(keyListener);

    mainPanel.requestFocusInWindow(); //make sure the frame has focus   
    
    decPanel.add(mainPanel);
    //add the main panel to the frame
    this.add(decPanel);
    
    
    //Start the app
    this.setVisible(true);
    
  }
  
  
  //INNER CLASS - Overide Paint Component for JPANEL
  private class DecoratedPanel extends JPanel {
    
    DecoratedPanel() {
      this.setBackground(new Color(0,0,0,0));
      this.requestFocusInWindow(); //make sure the frame has focus
    }
    
    public void paintComponent(Graphics g) { 
      super.paintComponent(g);     
      Image bg = new ImageIcon("CharacterSelectCave.png").getImage();
      g.drawImage(bg, 0, 0, null); 
    }
    
    
  }
  //This is an inner class that is used to detect a button press
  private class KnightButtonListener implements ActionListener {  //this is the required class definition
    public void actionPerformed(ActionEvent event)  {  
      System.out.println("Knight selected");
      Hero player = new Knight(100,50,4,18,500,500,60,60);
      new GameWindow(player, 14); //create a new FunkyFrame (another file that extends JFrame)
      thisFrame.dispose();
    }
  }
  
  private class RangerButtonListener implements ActionListener {  //this is the required class definition
    public void actionPerformed(ActionEvent event)  {  
      System.out.println("Ranger selected");
      Hero player = new Ranger(100,30,5.5,26,500,500,60,60);
      new GameWindow(player,7); //create a new FunkyFrame (another file that extends JFrame)
      thisFrame.dispose();
    }
  }
  
  private class MageButtonListener implements ActionListener {  //this is the required class definition
    public void actionPerformed(ActionEvent event)  {  
      System.out.println("Mage selected");
      Hero player = new Mage(100,20,4.5,22,500,500,60,60);
      new GameWindow(player,1);
      thisFrame.dispose();
    }
  }
  
  private class ReturnButtonListener implements ActionListener {  //this is the required class definition
    public void actionPerformed(ActionEvent event)  {  
      System.out.println("Returning to menu");
      new MenuUIV2(); //create a new Main Menu (another file that extends JFrame)
      thisFrame.dispose();
    }
  }
  
  
  //Main method starts this application
 public static void main(String[] args) { 
   new CharacterSelect();

 }
  
}